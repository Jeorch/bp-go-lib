// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     Es.avsc
 *     ExampleRequest.avsc
 *     ExampleResponse.avsc
 *     HiveTask.avsc
 *     HiveTracebackTask.avsc
 *     MapExample.avsc
 *     OssTask.avsc
 */

package record

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type Es struct {
	Time     string
	Hostname string
	Ip       string
	Cpu      string
	Memory   string
	Disk     string
	Receive  string
	Transmit string
}

func NewEsWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &Es{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeEs(r io.Reader) (*Es, error) {
	t := NewEs()

	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	return t, err
}

func NewEs() *Es {
	return &Es{}
}

func (r *Es) Schema() string {
	return "{\"fields\":[{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"hostname\",\"type\":\"string\"},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"cpu\",\"type\":\"string\"},{\"name\":\"memory\",\"type\":\"string\"},{\"name\":\"disk\",\"type\":\"string\"},{\"name\":\"receive\",\"type\":\"string\"},{\"name\":\"transmit\",\"type\":\"string\"}],\"name\":\"es\",\"type\":\"record\"}"
}

func (r *Es) SchemaName() string {
	return "es"
}

func (r *Es) Serialize(w io.Writer) error {
	return writeEs(r, w)
}

func (_ *Es) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Es) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Es) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Es) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Es) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Es) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Es) SetString(v string)   { panic("Unsupported operation") }
func (_ *Es) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *Es) Get(i int) types.Field {
	switch i {
	case 0:
		return (*types.String)(&r.Time)
	case 1:
		return (*types.String)(&r.Hostname)
	case 2:
		return (*types.String)(&r.Ip)
	case 3:
		return (*types.String)(&r.Cpu)
	case 4:
		return (*types.String)(&r.Memory)
	case 5:
		return (*types.String)(&r.Disk)
	case 6:
		return (*types.String)(&r.Receive)
	case 7:
		return (*types.String)(&r.Transmit)

	}
	panic("Unknown field index")
}
func (r *Es) SetDefault(i int) {
	switch i {

	}
	panic("Unknown field index")
}
func (_ *Es) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Es) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Es) Finalize()                        {}

type EsReader struct {
	r io.Reader
	p *vm.Program
}

func NewEsReader(r io.Reader) (*EsReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewEs()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &EsReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *EsReader) Read() (*Es, error) {
	t := NewEs()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
